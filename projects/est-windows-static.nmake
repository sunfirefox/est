#
#   est-windows-static.nmake -- Makefile to build Embedded Security Transport for windows
#

PRODUCT            = est
VERSION            = 0.6.0
BUILD_NUMBER       = 0
PROFILE            = static
PA                 = $(PROCESSOR_ARCHITECTURE)

!IF "$(PA)" == "AMD64"
ARCH               = x64
ENTRY              = _DllMainCRTStartup
!ELSE
ARCH               = x86
ENTRY              = _DllMainCRTStartup@12
!ENDIF

OS                 = windows
CONFIG             = $(OS)-$(ARCH)-$(PROFILE)
LBIN               = $(CONFIG)\bin


!IF "$(BIT_PACK_LIB)" == "1"
BIT_PACK_COMPILER = 1
!ENDIF

!IF "$(BIT_PACK_RC)" == "1"
BIT_PACK_WINSDK = 1
!ENDIF


BIT_PACK_COMPILER_PATH    = cl
BIT_PACK_DOXYGEN_PATH     = doxygen
BIT_PACK_DSI_PATH         = dsi
BIT_PACK_LIB_PATH         = lib.exe
BIT_PACK_LINK_PATH        = link
BIT_PACK_MAN_PATH         = man
BIT_PACK_MAN2HTML_PATH    = man2html
BIT_PACK_PMAKER_PATH      = pmaker
BIT_PACK_RC_PATH          = rc
BIT_PACK_UTEST_PATH       = utest
BIT_PACK_WINSDK_PATH      = winsdk
BIT_PACK_ZIP_PATH         = zip

CC                 = cl
LD                 = link
RC                 = rc
CFLAGS             = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS             = -D_REENTRANT -D_MT -DBIT_DEBUG 
IFLAGS             = -I$(CONFIG)\inc
LDFLAGS            = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS           = -libpath:$(CONFIG)\bin
LIBS               = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

BIT_ROOT_PREFIX    = C:
BIT_BASE_PREFIX    = $(BIT_ROOT_PREFIX)\Program Files
BIT_APP_PREFIX     = $(BIT_BASE_PREFIX)\Embedded Security Transport
BIT_VAPP_PREFIX    = $(BIT_APP_PREFIX)
BIT_DATA_PREFIX    = $(BIT_VAPP_PREFIX)
BIT_STATE_PREFIX   = $(BIT_VAPP_PREFIX)
BIT_BIN_PREFIX     = $(BIT_VAPP_PREFIX)\bin
BIT_INC_PREFIX     = $(BIT_VAPP_PREFIX)\inc
BIT_LIB_PREFIX     = $(BIT_VAPP_PREFIX)\lib
BIT_MAN_PREFIX     = $(BIT_VAPP_PREFIX)\man
BIT_ETC_PREFIX     = $(BIT_VAPP_PREFIX)
BIT_WEB_PREFIX     = $(BIT_VAPP_PREFIX)\web
BIT_LOG_PREFIX     = $(BIT_VAPP_PREFIX)\log
BIT_SPOOL_PREFIX   = $(BIT_VAPP_PREFIX)\tmp
BIT_CACHE_PREFIX   = $(BIT_VAPP_PREFIX)\cache
BIT_SRC_PREFIX     = $(BIT_VAPP_PREFIX)\src


TARGETS            = $(TARGETS) $(CONFIG)\bin\libest.lib

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(BIT_APP_PREFIX)" == ""
	echo "BIT_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\bit.h copy projects\est-windows-static-bit.h $(CONFIG)\inc\bit.h

clean:
	if exist "$(CONFIG)\bin\libest.lib" del /Q "$(CONFIG)\bin\libest.lib"
	if exist "$(CONFIG)\obj\aes.obj" del /Q "$(CONFIG)\obj\aes.obj"
	if exist "$(CONFIG)\obj\arc4.obj" del /Q "$(CONFIG)\obj\arc4.obj"
	if exist "$(CONFIG)\obj\base64.obj" del /Q "$(CONFIG)\obj\base64.obj"
	if exist "$(CONFIG)\obj\bignum.obj" del /Q "$(CONFIG)\obj\bignum.obj"
	if exist "$(CONFIG)\obj\camellia.obj" del /Q "$(CONFIG)\obj\camellia.obj"
	if exist "$(CONFIG)\obj\certs.obj" del /Q "$(CONFIG)\obj\certs.obj"
	if exist "$(CONFIG)\obj\debug.obj" del /Q "$(CONFIG)\obj\debug.obj"
	if exist "$(CONFIG)\obj\des.obj" del /Q "$(CONFIG)\obj\des.obj"
	if exist "$(CONFIG)\obj\dhm.obj" del /Q "$(CONFIG)\obj\dhm.obj"
	if exist "$(CONFIG)\obj\havege.obj" del /Q "$(CONFIG)\obj\havege.obj"
	if exist "$(CONFIG)\obj\md2.obj" del /Q "$(CONFIG)\obj\md2.obj"
	if exist "$(CONFIG)\obj\md4.obj" del /Q "$(CONFIG)\obj\md4.obj"
	if exist "$(CONFIG)\obj\md5.obj" del /Q "$(CONFIG)\obj\md5.obj"
	if exist "$(CONFIG)\obj\net.obj" del /Q "$(CONFIG)\obj\net.obj"
	if exist "$(CONFIG)\obj\padlock.obj" del /Q "$(CONFIG)\obj\padlock.obj"
	if exist "$(CONFIG)\obj\rsa.obj" del /Q "$(CONFIG)\obj\rsa.obj"
	if exist "$(CONFIG)\obj\sha1.obj" del /Q "$(CONFIG)\obj\sha1.obj"
	if exist "$(CONFIG)\obj\sha2.obj" del /Q "$(CONFIG)\obj\sha2.obj"
	if exist "$(CONFIG)\obj\sha4.obj" del /Q "$(CONFIG)\obj\sha4.obj"
	if exist "$(CONFIG)\obj\ssl_cli.obj" del /Q "$(CONFIG)\obj\ssl_cli.obj"
	if exist "$(CONFIG)\obj\ssl_srv.obj" del /Q "$(CONFIG)\obj\ssl_srv.obj"
	if exist "$(CONFIG)\obj\ssl_tls.obj" del /Q "$(CONFIG)\obj\ssl_tls.obj"
	if exist "$(CONFIG)\obj\timing.obj" del /Q "$(CONFIG)\obj\timing.obj"
	if exist "$(CONFIG)\obj\x509parse.obj" del /Q "$(CONFIG)\obj\x509parse.obj"
	if exist "$(CONFIG)\obj\xtea.obj" del /Q "$(CONFIG)\obj\xtea.obj"



#
#   version
#
version: $(DEPS_1)
	@echo 0.6.0-0

#
#   aes.h
#
$(CONFIG)\inc\aes.h: $(DEPS_2)
	@echo '      [Copy] $(CONFIG)/inc/aes.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\aes.h $(CONFIG)\inc\aes.h

#
#   arc4.h
#
$(CONFIG)\inc\arc4.h: $(DEPS_3)
	@echo '      [Copy] $(CONFIG)/inc/arc4.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\arc4.h $(CONFIG)\inc\arc4.h

#
#   base64.h
#
$(CONFIG)\inc\base64.h: $(DEPS_4)
	@echo '      [Copy] $(CONFIG)/inc/base64.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\base64.h $(CONFIG)\inc\base64.h

#
#   bignum.h
#
$(CONFIG)\inc\bignum.h: $(DEPS_5)
	@echo '      [Copy] $(CONFIG)/inc/bignum.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\bignum.h $(CONFIG)\inc\bignum.h

#
#   bit.h
#
$(CONFIG)\inc\bit.h: $(DEPS_6)
	@echo '      [Copy] $(CONFIG)/inc/bit.h'

#
#   bitos.h
#
DEPS_7 = $(DEPS_7) $(CONFIG)\inc\bit.h

$(CONFIG)\inc\bitos.h: $(DEPS_7)
	@echo '      [Copy] $(CONFIG)/inc/bitos.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\bitos.h $(CONFIG)\inc\bitos.h

#
#   bn_mul.h
#
$(CONFIG)\inc\bn_mul.h: $(DEPS_8)
	@echo '      [Copy] $(CONFIG)/inc/bn_mul.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\bn_mul.h $(CONFIG)\inc\bn_mul.h

#
#   camellia.h
#
$(CONFIG)\inc\camellia.h: $(DEPS_9)
	@echo '      [Copy] $(CONFIG)/inc/camellia.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\camellia.h $(CONFIG)\inc\camellia.h

#
#   certs.h
#
$(CONFIG)\inc\certs.h: $(DEPS_10)
	@echo '      [Copy] $(CONFIG)/inc/certs.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\certs.h $(CONFIG)\inc\certs.h

#
#   debug.h
#
$(CONFIG)\inc\debug.h: $(DEPS_11)
	@echo '      [Copy] $(CONFIG)/inc/debug.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\debug.h $(CONFIG)\inc\debug.h

#
#   des.h
#
$(CONFIG)\inc\des.h: $(DEPS_12)
	@echo '      [Copy] $(CONFIG)/inc/des.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\des.h $(CONFIG)\inc\des.h

#
#   dhm.h
#
$(CONFIG)\inc\dhm.h: $(DEPS_13)
	@echo '      [Copy] $(CONFIG)/inc/dhm.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\dhm.h $(CONFIG)\inc\dhm.h

#
#   est.h
#
$(CONFIG)\inc\est.h: $(DEPS_14)
	@echo '      [Copy] $(CONFIG)/inc/est.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\est.h $(CONFIG)\inc\est.h

#
#   havege.h
#
$(CONFIG)\inc\havege.h: $(DEPS_15)
	@echo '      [Copy] $(CONFIG)/inc/havege.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\havege.h $(CONFIG)\inc\havege.h

#
#   md2.h
#
$(CONFIG)\inc\md2.h: $(DEPS_16)
	@echo '      [Copy] $(CONFIG)/inc/md2.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\md2.h $(CONFIG)\inc\md2.h

#
#   md4.h
#
$(CONFIG)\inc\md4.h: $(DEPS_17)
	@echo '      [Copy] $(CONFIG)/inc/md4.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\md4.h $(CONFIG)\inc\md4.h

#
#   md5.h
#
$(CONFIG)\inc\md5.h: $(DEPS_18)
	@echo '      [Copy] $(CONFIG)/inc/md5.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\md5.h $(CONFIG)\inc\md5.h

#
#   net.h
#
$(CONFIG)\inc\net.h: $(DEPS_19)
	@echo '      [Copy] $(CONFIG)/inc/net.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\net.h $(CONFIG)\inc\net.h

#
#   openssl.h
#
$(CONFIG)\inc\openssl.h: $(DEPS_20)
	@echo '      [Copy] $(CONFIG)/inc/openssl.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\openssl.h $(CONFIG)\inc\openssl.h

#
#   padlock.h
#
$(CONFIG)\inc\padlock.h: $(DEPS_21)
	@echo '      [Copy] $(CONFIG)/inc/padlock.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\padlock.h $(CONFIG)\inc\padlock.h

#
#   rsa.h
#
$(CONFIG)\inc\rsa.h: $(DEPS_22)
	@echo '      [Copy] $(CONFIG)/inc/rsa.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\rsa.h $(CONFIG)\inc\rsa.h

#
#   sha1.h
#
$(CONFIG)\inc\sha1.h: $(DEPS_23)
	@echo '      [Copy] $(CONFIG)/inc/sha1.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\sha1.h $(CONFIG)\inc\sha1.h

#
#   sha2.h
#
$(CONFIG)\inc\sha2.h: $(DEPS_24)
	@echo '      [Copy] $(CONFIG)/inc/sha2.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\sha2.h $(CONFIG)\inc\sha2.h

#
#   sha4.h
#
$(CONFIG)\inc\sha4.h: $(DEPS_25)
	@echo '      [Copy] $(CONFIG)/inc/sha4.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\sha4.h $(CONFIG)\inc\sha4.h

#
#   ssl.h
#
$(CONFIG)\inc\ssl.h: $(DEPS_26)
	@echo '      [Copy] $(CONFIG)/inc/ssl.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\ssl.h $(CONFIG)\inc\ssl.h

#
#   timing.h
#
$(CONFIG)\inc\timing.h: $(DEPS_27)
	@echo '      [Copy] $(CONFIG)/inc/timing.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\timing.h $(CONFIG)\inc\timing.h

#
#   x509.h
#
$(CONFIG)\inc\x509.h: $(DEPS_28)
	@echo '      [Copy] $(CONFIG)/inc/x509.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\x509.h $(CONFIG)\inc\x509.h

#
#   xtea.h
#
$(CONFIG)\inc\xtea.h: $(DEPS_29)
	@echo '      [Copy] $(CONFIG)/inc/xtea.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\xtea.h $(CONFIG)\inc\xtea.h

#
#   aes.obj
#
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\bit.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\est.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\bitos.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\bignum.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\net.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\dhm.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\rsa.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\md5.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\sha1.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\x509.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\ssl.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\aes.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\arc4.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\base64.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\bn_mul.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\camellia.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\certs.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\debug.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\des.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\havege.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\md2.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\md4.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\padlock.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\sha2.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\sha4.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\timing.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\xtea.h

$(CONFIG)\obj\aes.obj: \
    src\aes.c $(DEPS_30)
	@echo '   [Compile] $(CONFIG)/obj/aes.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\aes.obj -Fd$(CONFIG)\obj\aes.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\aes.c

#
#   arc4.obj
#
DEPS_31 = $(DEPS_31) $(CONFIG)\inc\bit.h
DEPS_31 = $(DEPS_31) $(CONFIG)\inc\est.h

$(CONFIG)\obj\arc4.obj: \
    src\arc4.c $(DEPS_31)
	@echo '   [Compile] $(CONFIG)/obj/arc4.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\arc4.obj -Fd$(CONFIG)\obj\arc4.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\arc4.c

#
#   base64.obj
#
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\bit.h
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\est.h

$(CONFIG)\obj\base64.obj: \
    src\base64.c $(DEPS_32)
	@echo '   [Compile] $(CONFIG)/obj/base64.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\base64.obj -Fd$(CONFIG)\obj\base64.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\base64.c

#
#   bignum.obj
#
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\bit.h
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\est.h

$(CONFIG)\obj\bignum.obj: \
    src\bignum.c $(DEPS_33)
	@echo '   [Compile] $(CONFIG)/obj/bignum.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\bignum.obj -Fd$(CONFIG)\obj\bignum.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\bignum.c

#
#   camellia.obj
#
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\bit.h
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\est.h

$(CONFIG)\obj\camellia.obj: \
    src\camellia.c $(DEPS_34)
	@echo '   [Compile] $(CONFIG)/obj/camellia.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\camellia.obj -Fd$(CONFIG)\obj\camellia.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\camellia.c

#
#   certs.obj
#
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\bit.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\est.h

$(CONFIG)\obj\certs.obj: \
    src\certs.c $(DEPS_35)
	@echo '   [Compile] $(CONFIG)/obj/certs.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\certs.obj -Fd$(CONFIG)\obj\certs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\certs.c

#
#   debug.obj
#
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\bit.h
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\est.h

$(CONFIG)\obj\debug.obj: \
    src\debug.c $(DEPS_36)
	@echo '   [Compile] $(CONFIG)/obj/debug.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\debug.obj -Fd$(CONFIG)\obj\debug.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\debug.c

#
#   des.obj
#
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\bit.h
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\est.h

$(CONFIG)\obj\des.obj: \
    src\des.c $(DEPS_37)
	@echo '   [Compile] $(CONFIG)/obj/des.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\des.obj -Fd$(CONFIG)\obj\des.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\des.c

#
#   dhm.obj
#
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\bit.h
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\est.h

$(CONFIG)\obj\dhm.obj: \
    src\dhm.c $(DEPS_38)
	@echo '   [Compile] $(CONFIG)/obj/dhm.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\dhm.obj -Fd$(CONFIG)\obj\dhm.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\dhm.c

#
#   havege.obj
#
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\bit.h
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\est.h

$(CONFIG)\obj\havege.obj: \
    src\havege.c $(DEPS_39)
	@echo '   [Compile] $(CONFIG)/obj/havege.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\havege.obj -Fd$(CONFIG)\obj\havege.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\havege.c

#
#   md2.obj
#
DEPS_40 = $(DEPS_40) $(CONFIG)\inc\bit.h
DEPS_40 = $(DEPS_40) $(CONFIG)\inc\est.h

$(CONFIG)\obj\md2.obj: \
    src\md2.c $(DEPS_40)
	@echo '   [Compile] $(CONFIG)/obj/md2.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\md2.obj -Fd$(CONFIG)\obj\md2.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\md2.c

#
#   md4.obj
#
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\bit.h
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\est.h

$(CONFIG)\obj\md4.obj: \
    src\md4.c $(DEPS_41)
	@echo '   [Compile] $(CONFIG)/obj/md4.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\md4.obj -Fd$(CONFIG)\obj\md4.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\md4.c

#
#   md5.obj
#
DEPS_42 = $(DEPS_42) $(CONFIG)\inc\bit.h
DEPS_42 = $(DEPS_42) $(CONFIG)\inc\est.h

$(CONFIG)\obj\md5.obj: \
    src\md5.c $(DEPS_42)
	@echo '   [Compile] $(CONFIG)/obj/md5.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\md5.obj -Fd$(CONFIG)\obj\md5.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\md5.c

#
#   net.obj
#
DEPS_43 = $(DEPS_43) $(CONFIG)\inc\bit.h
DEPS_43 = $(DEPS_43) $(CONFIG)\inc\est.h

$(CONFIG)\obj\net.obj: \
    src\net.c $(DEPS_43)
	@echo '   [Compile] $(CONFIG)/obj/net.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\net.obj -Fd$(CONFIG)\obj\net.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\net.c

#
#   padlock.obj
#
DEPS_44 = $(DEPS_44) $(CONFIG)\inc\bit.h
DEPS_44 = $(DEPS_44) $(CONFIG)\inc\est.h

$(CONFIG)\obj\padlock.obj: \
    src\padlock.c $(DEPS_44)
	@echo '   [Compile] $(CONFIG)/obj/padlock.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\padlock.obj -Fd$(CONFIG)\obj\padlock.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\padlock.c

#
#   rsa.obj
#
DEPS_45 = $(DEPS_45) $(CONFIG)\inc\bit.h
DEPS_45 = $(DEPS_45) $(CONFIG)\inc\est.h

$(CONFIG)\obj\rsa.obj: \
    src\rsa.c $(DEPS_45)
	@echo '   [Compile] $(CONFIG)/obj/rsa.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\rsa.obj -Fd$(CONFIG)\obj\rsa.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\rsa.c

#
#   sha1.obj
#
DEPS_46 = $(DEPS_46) $(CONFIG)\inc\bit.h
DEPS_46 = $(DEPS_46) $(CONFIG)\inc\est.h

$(CONFIG)\obj\sha1.obj: \
    src\sha1.c $(DEPS_46)
	@echo '   [Compile] $(CONFIG)/obj/sha1.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\sha1.obj -Fd$(CONFIG)\obj\sha1.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sha1.c

#
#   sha2.obj
#
DEPS_47 = $(DEPS_47) $(CONFIG)\inc\bit.h
DEPS_47 = $(DEPS_47) $(CONFIG)\inc\est.h

$(CONFIG)\obj\sha2.obj: \
    src\sha2.c $(DEPS_47)
	@echo '   [Compile] $(CONFIG)/obj/sha2.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\sha2.obj -Fd$(CONFIG)\obj\sha2.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sha2.c

#
#   sha4.obj
#
DEPS_48 = $(DEPS_48) $(CONFIG)\inc\bit.h
DEPS_48 = $(DEPS_48) $(CONFIG)\inc\est.h

$(CONFIG)\obj\sha4.obj: \
    src\sha4.c $(DEPS_48)
	@echo '   [Compile] $(CONFIG)/obj/sha4.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\sha4.obj -Fd$(CONFIG)\obj\sha4.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sha4.c

#
#   ssl_cli.obj
#
DEPS_49 = $(DEPS_49) $(CONFIG)\inc\bit.h
DEPS_49 = $(DEPS_49) $(CONFIG)\inc\est.h

$(CONFIG)\obj\ssl_cli.obj: \
    src\ssl_cli.c $(DEPS_49)
	@echo '   [Compile] $(CONFIG)/obj/ssl_cli.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\ssl_cli.obj -Fd$(CONFIG)\obj\ssl_cli.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ssl_cli.c

#
#   ssl_srv.obj
#
DEPS_50 = $(DEPS_50) $(CONFIG)\inc\bit.h
DEPS_50 = $(DEPS_50) $(CONFIG)\inc\est.h

$(CONFIG)\obj\ssl_srv.obj: \
    src\ssl_srv.c $(DEPS_50)
	@echo '   [Compile] $(CONFIG)/obj/ssl_srv.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\ssl_srv.obj -Fd$(CONFIG)\obj\ssl_srv.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ssl_srv.c

#
#   ssl_tls.obj
#
DEPS_51 = $(DEPS_51) $(CONFIG)\inc\bit.h
DEPS_51 = $(DEPS_51) $(CONFIG)\inc\est.h

$(CONFIG)\obj\ssl_tls.obj: \
    src\ssl_tls.c $(DEPS_51)
	@echo '   [Compile] $(CONFIG)/obj/ssl_tls.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\ssl_tls.obj -Fd$(CONFIG)\obj\ssl_tls.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ssl_tls.c

#
#   timing.obj
#
DEPS_52 = $(DEPS_52) $(CONFIG)\inc\bit.h
DEPS_52 = $(DEPS_52) $(CONFIG)\inc\est.h

$(CONFIG)\obj\timing.obj: \
    src\timing.c $(DEPS_52)
	@echo '   [Compile] $(CONFIG)/obj/timing.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\timing.obj -Fd$(CONFIG)\obj\timing.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\timing.c

#
#   x509parse.obj
#
DEPS_53 = $(DEPS_53) $(CONFIG)\inc\bit.h
DEPS_53 = $(DEPS_53) $(CONFIG)\inc\est.h

$(CONFIG)\obj\x509parse.obj: \
    src\x509parse.c $(DEPS_53)
	@echo '   [Compile] $(CONFIG)/obj/x509parse.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\x509parse.obj -Fd$(CONFIG)\obj\x509parse.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\x509parse.c

#
#   xtea.obj
#
DEPS_54 = $(DEPS_54) $(CONFIG)\inc\bit.h
DEPS_54 = $(DEPS_54) $(CONFIG)\inc\est.h

$(CONFIG)\obj\xtea.obj: \
    src\xtea.c $(DEPS_54)
	@echo '   [Compile] $(CONFIG)/obj/xtea.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\xtea.obj -Fd$(CONFIG)\obj\xtea.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\xtea.c

#
#   libest
#
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\aes.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\arc4.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\base64.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\bignum.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\bitos.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\bn_mul.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\camellia.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\certs.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\debug.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\des.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\dhm.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\est.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\havege.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\md2.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\md4.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\md5.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\net.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\openssl.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\padlock.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\rsa.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\sha1.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\sha2.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\sha4.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\ssl.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\timing.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\x509.h
DEPS_55 = $(DEPS_55) $(CONFIG)\inc\xtea.h
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\aes.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\arc4.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\base64.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\bignum.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\camellia.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\certs.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\debug.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\des.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\dhm.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\havege.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\md2.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\md4.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\md5.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\net.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\padlock.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\rsa.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\sha1.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\sha2.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\sha4.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\ssl_cli.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\ssl_srv.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\ssl_tls.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\timing.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\x509parse.obj
DEPS_55 = $(DEPS_55) $(CONFIG)\obj\xtea.obj

$(CONFIG)\bin\libest.lib: $(DEPS_55)
	@echo '      [Link] $(CONFIG)/bin/libest.lib'
	"lib.exe" -nologo -out:$(CONFIG)\bin\libest.lib $(CONFIG)\obj\aes.obj $(CONFIG)\obj\arc4.obj $(CONFIG)\obj\base64.obj $(CONFIG)\obj\bignum.obj $(CONFIG)\obj\camellia.obj $(CONFIG)\obj\certs.obj $(CONFIG)\obj\debug.obj $(CONFIG)\obj\des.obj $(CONFIG)\obj\dhm.obj $(CONFIG)\obj\havege.obj $(CONFIG)\obj\md2.obj $(CONFIG)\obj\md4.obj $(CONFIG)\obj\md5.obj $(CONFIG)\obj\net.obj $(CONFIG)\obj\padlock.obj $(CONFIG)\obj\rsa.obj $(CONFIG)\obj\sha1.obj $(CONFIG)\obj\sha2.obj $(CONFIG)\obj\sha4.obj $(CONFIG)\obj\ssl_cli.obj $(CONFIG)\obj\ssl_srv.obj $(CONFIG)\obj\ssl_tls.obj $(CONFIG)\obj\timing.obj $(CONFIG)\obj\x509parse.obj $(CONFIG)\obj\xtea.obj

#
#   stop
#
stop: $(DEPS_56)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_57)

#
#   start
#
start: $(DEPS_58)
#  Omit build script start

#
#   install
#
DEPS_59 = $(DEPS_59) stop
DEPS_59 = $(DEPS_59) installBinary
DEPS_59 = $(DEPS_59) start

install: $(DEPS_59)


#
#   uninstall
#
DEPS_60 = $(DEPS_60) stop

uninstall: $(DEPS_60)

